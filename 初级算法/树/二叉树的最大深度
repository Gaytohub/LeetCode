/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
 法一： 递归
class Solution {
    public int maxDepth(TreeNode root) {
        if (root == null){
            return 0;
        }else {
            int height_left = maxDepth(root.left);
            int height_right = maxDepth(root.right);
            return java.lang.Math.max(height_left, height_right) + 1;             //递归调用
        }
    }
}

法二： 迭代
//我们的想法是使用 DFS 策略访问每个结点，同时在每次访问时更新最大深度。
class Solution {
    public int maxDepth(TreeNode root) {
        Queue<Pair<TreeNode, Integer>> stack = new LinkedList<>();                //这样写的话，要使用LinkedList中的方法需要进行强制类型转化。
        if (root != null){
            stack.add(new Pair(root, 1));                                         //向栈中添加Root节点和深度1
        }

        int depth = 0;
        while (!stack.isEmpty()){
            Pair<TreeNode, Integer> current = stack.poll();
            root = current.getKey();
            int current_depth = current.getValue();                               //获取当前的深度值
            if (root != null){
                depth = Math.max(depth, current_depth);                           //深度值为 当前深度值 和 深度值 中的 较大值
                stack.add(new Pair(root.left, current_depth + 1));
                stack.add(new Pair(root.right, current_depth + 1));
            }
        }
        return depth;
    }
}
